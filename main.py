from flask import Flask, render_template_string, jsonify, request
import requests
import json
import httpx
import time
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.executors.pool import ThreadPoolExecutor
import os

app = Flask(__name__)

# URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ 1–°
url = os.getenv('ONE_URL')

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Shopify API
shopify_store_url = os.getenv('SHOPIFY_STORE_URL')
access_token = os.getenv('SHOPIFY_ACCESS_TOKEN')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö JSON-–æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
def extract_valid_json(content):
    decoder = json.JSONDecoder()
    idx = 0
    valid_data = []
    while idx < len(content):
        try:
            obj, idx = decoder.raw_decode(content, idx)
            valid_data.append(obj)
        except json.JSONDecodeError:
            idx += 1  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    return valid_data

# –û—á–∏—Å—Ç–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ JSON
def clean_json_content(content):
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª–µ—à–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—è—Ç—ã–º–∏
    return content.replace('\\",', '",')


def clean_price(amount):
    try:
        print(f"üîç –ò—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞: {amount} | –¢–∏–ø: {type(amount)}")  # –õ–æ–≥ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π

        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã, –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏
        amount_cleaned = str(amount).replace('\u00A0', '').replace(' ', '').replace(',', '.')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ —á–∏—Å–ª–æ —Å —Ç–æ—á–∫–æ–π
        if '.' in amount_cleaned:
            price = round(float(amount_cleaned), 2)  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ—á–∫–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ float
        else:
            price = int(amount_cleaned)  # –ï—Å–ª–∏ —Ç–æ—á–µ–∫ –Ω–µ—Ç ‚Äî —ç—Ç–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ

        print(f"‚úÖ –û—á–∏—â–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞: {price} | –¢–∏–ø: {type(price)}")  # –õ–æ–≥ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        return price
    except (ValueError, TypeError) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ clean_price(): {e} | –ò—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {amount}")  # –õ–æ–≥ –æ—à–∏–±–∫–∏
        return 0.0  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0.0


def clean_quantity(quantity):
    try:
        print(f"üîç –ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} | –¢–∏–ø: {type(quantity)}")  # –õ–æ–≥ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π

        if not quantity:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ None –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            return 0

        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã (–≤–∫–ª—é—á–∞—è –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ), –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏
        quantity_cleaned = str(quantity).replace('\u00A0', '').replace(' ', '').replace(',', '.')

        # –ï—Å–ª–∏ —á–∏—Å–ª–æ —Å —Ç–æ—á–∫–æ–π ‚Äî –æ–∫—Ä—É–≥–ª—è–µ–º –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ int
        if '.' in quantity_cleaned:
            quantity_int = int(float(quantity_cleaned))  # float ‚Üí int, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å .0
        else:
            quantity_int = int(quantity_cleaned)  # –£–∂–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ

        print(f"‚úÖ –û—á–∏—â–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity_int} | –¢–∏–ø: {type(quantity_int)}")  # –õ–æ–≥ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        return quantity_int
    except (ValueError, TypeError) as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ clean_quantity(): {e} | –ò—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {quantity}")  # –õ–æ–≥ –æ—à–∏–±–∫–∏
        return 0  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0


# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ 1–°
def fetch_products():
    try:
        with httpx.Client(http2=True, verify=False, timeout=10) as client:
            response = client.get(url)
            print(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –æ—Ç 1–°: {response.status_code}")

            if response.status_code == 200:
                content = response.content.decode('utf-8-sig').strip()
                content = clean_json_content(content)
                try:
                    products = json.loads(content)
                    return products
                except json.JSONDecodeError as e:
                    print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ JSON-–æ–±—ä–µ–∫—Ç—ã
                    return extract_valid_json(content)
            else:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ 1–°. –ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
                return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ 1–°: {e}")
        return None

# –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ Shopify (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)
def fetch_all_shopify_products():
    shopify_url = f"{shopify_store_url}/admin/api/2024-01/products.json?fields=id,variants,status&limit=250"
    headers = {
        "Content-Type": "application/json",
        "X-Shopify-Access-Token": access_token
    }
    all_products = []
    page_info = None

    while True:
        params = {"limit": 250}
        if page_info:
            params["page_info"] = page_info

        # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º –∫ Shopify, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å 429
        time.sleep(0.6)

        response = requests.get(shopify_url, headers=headers, params=params)
        if response.status_code == 200:
            products = response.json().get('products', [])
            all_products.extend(products)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ "Link" –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            link_header = response.headers.get("Link")
            if link_header and 'rel="next"' in link_header:
                page_info = link_header.split('page_info=')[1].split('>')[0]
            else:
                break
        else:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Shopify. –ö–æ–¥: {response.status_code}")
            break

    return all_products


def send_request_with_retry(url, method='GET', headers=None, json_data=None, max_retries=5):
    retries = 0
    while retries < max_retries:
        response = None
        try:
            if method == 'GET':
                response = requests.get(url, headers=headers)
            elif method == 'POST':
                response = requests.post(url, headers=headers, json=json_data)
            elif method == 'PUT':
                response = requests.put(url, headers=headers, json=json_data)

            if response.status_code == 429:  # Too Many Requests
                retry_after = response.headers.get("Retry-After", 5)  # –ë–µ—Ä–µ–º Retry-After, –∏–Ω–∞—á–µ 5 —Å–µ–∫
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ 429, –∂–¥–µ–º {retry_after} —Å–µ–∫—É–Ω–¥... –ü–æ–ø—ã—Ç–∫–∞ {retries + 1} –∏–∑ {max_retries}")
                time.sleep(int(float(retry_after)))  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ç–µ–ø–µ—Ä—å Retry-After –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è
                retries += 1
            else:
                print(f"‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ—Å–ª–µ {retries} –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫. –ö–æ–¥: {response.status_code}")
                return response  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e} | –ü–æ–ø—ã—Ç–∫–∞ {retries + 1} –∏–∑ {max_retries}")
            time.sleep(2 ** retries)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–≤—Ç–æ—Ä–æ–º
            retries += 1

    print(f"‚ùó –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ ({max_retries}). –ó–∞–ø—Ä–æ—Å –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.")
    return response  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫


def update_shopify_variant(variant_id, inventory_item_id, new_price, new_quantity):
    headers = {
        "Content-Type": "application/json",
        "X-Shopify-Access-Token": access_token
    }

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
    update_variant_url = f"{shopify_store_url}/admin/api/2024-01/variants/{variant_id}.json"
    variant_data = {"variant": {"id": variant_id, "price": new_price}}
    response = send_request_with_retry(update_variant_url, method='PUT', headers=headers, json_data=variant_data)
    if response and response.status_code == 200:
        print(f"‚úÖ –¶–µ–Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ {variant_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
    else:
        print(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã –≤–∞—Ä–∏–∞–Ω—Ç–∞ {variant_id}: {response.status_code if response else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ Inventory API
    update_inventory_url = f"{shopify_store_url}/admin/api/2024-01/inventory_levels/set.json"
    inventory_data = {"location_id": 73379741896, "inventory_item_id": inventory_item_id, "available": new_quantity}
    response = send_request_with_retry(update_inventory_url, method='POST', headers=headers, json_data=inventory_data)
    if response and response.status_code == 200:
        print(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ {variant_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    else:
        print(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ {variant_id}: {response.status_code if response else '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞'}")


# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ 1–° –¥–ª—è Shopify
def transform_to_shopify_format(product):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å —Å–ª–æ–≤–∞—Ä—å
    if not isinstance(product, dict):
        print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–≤–∞—Ä–∞: {product}")
        return None

    # –ò—â–µ–º —Ü–µ–Ω—É —Ç–∏–ø–∞ "–¢–û–í"
    price_info = next((p for p in product.get('price', []) if p.get('type_price') == '–¢–û–í'), None)
    if not price_info:
        return None  # –ï—Å–ª–∏ –Ω–µ—Ç —Ü–µ–Ω—ã "–¢–û–í", –Ω–µ –ø—É–±–ª–∏–∫—É–µ–º —Ç–æ–≤–∞—Ä

    # –û—á–∏—â–∞–µ–º —Ü–µ–Ω—É –∏ —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 1.2
    price_float = float(clean_price(price_info['amount'])) * 1.2
    # –û—á–∏—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    quantity_int = clean_quantity(product.get('quantity', '0'))

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–æ–≤–∞—Ä–∞ –¥–ª—è Shopify
    shopify_product = {
        "product": {
            "title": product['name'],
            "vendor": "MIXOpro.Ukraine",
            "tags": "1C Sync",
            "handle": product['name'].replace(" ", "-").lower(),
            "status": "active",  # –ü–æ —É—Å–ª–æ–≤–∏—é, –µ—Å–ª–∏ —Ü–µ–Ω–∞ –µ—Å—Ç—å, –¥–µ–ª–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º
            "variants": [
                {
                    "sku": product['id'],
                    "price": f"{price_float:.2f}",
                    "option1": "Default Title",
                    # –í–∫–ª—é—á–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞–º–∏ "shopify"
                    "inventory_management": "shopify",
                    "inventory_quantity": quantity_int,
                    "requires_shipping": True
                }
            ],
            "options": [
                {
                    "name": "Title",
                    "position": 1,
                    "values": [
                        "Default Title"
                    ]
                }
            ]
        }
    }
    return shopify_product

# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º (–∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º) —Ç–æ–≤–∞—Ä –≤ Shopify
def send_to_shopify(shopify_product, existing_products):
    sku = shopify_product['product']['variants'][0]['sku']
    new_price = shopify_product['product']['variants'][0]['price']
    new_quantity = shopify_product['product']['variants'][0]['inventory_quantity']

    # –ò—â–µ–º —Ç–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º SKU –≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
    existing_product = next((p for p in existing_products if any(v['sku'] == sku for v in p['variants'])), None)

    if existing_product:
        print(f"–¢–æ–≤–∞—Ä —Å–æ SKU {sku} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Shopify. –û–±–Ω–æ–≤–ª—è–µ–º...")
        variant = next(v for v in existing_product['variants'] if v['sku'] == sku)
        variant_id = variant['id']
        inventory_item_id = variant['inventory_item_id']  # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ–º inventory_item_id

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        print(f"–°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: —Ü–µ–Ω–∞ = {variant['price']}")
        print(f"–ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: —Ü–µ–Ω–∞ = {new_price}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = {new_quantity}")
        update_shopify_variant(variant_id, inventory_item_id, new_price, new_quantity)
    else:
        print(f"–¢–æ–≤–∞—Ä —Å–æ SKU {sku} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Shopify. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç.")
        time.sleep(0.6)

        shopify_url = f"{shopify_store_url}/admin/api/2024-01/products.json"
        headers = {
            "Content-Type": "application/json",
            "X-Shopify-Access-Token": access_token
        }
        response = requests.post(shopify_url, headers=headers, json=shopify_product)
        if response.status_code == 201:
            print("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
        else:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {response.status_code}, {response.json()}")

# üõ† –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è APScheduler
def scheduled_sync():
    with app.app_context():  # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
        print("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...")
        sync_products()

@app.route('/sync_products')
def sync_products():
    products = fetch_products()
    existing_products = fetch_all_shopify_products()

    if not products:
        return jsonify({'status': 'No products found or an error occurred.'})

    print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ 1–°: {len(products)}")
    for product in products:
        if not isinstance(product, dict):
            print(f"–ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–≤–∞—Ä–∞: {product}")
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–≤–∞—Ä–∞

        shopify_product = transform_to_shopify_format(product)
        if shopify_product:
            send_to_shopify(shopify_product, existing_products)
        else:
            print(f"–ü—Ä–æ–ø—É—â–µ–Ω —Ç–æ–≤–∞—Ä –±–µ–∑ —Ü–µ–Ω—ã '–¢–û–í': {product.get('id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ID')}")

    print("‚úÖ –§–æ–Ω–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    return jsonify({'status': 'finished'})

@app.route('/')
def index():
    return "The scheduler is running. Check your console for output."

# üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º APScheduler —Å –ø–æ—Ç–æ–∫–æ–º
executors = {
    'default': ThreadPoolExecutor(20)
}

scheduler = BackgroundScheduler(executors=executors)
scheduler.add_job(func=scheduled_sync, trigger='interval', minutes=3)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º `scheduled_sync`
scheduler.start()

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=80, debug=True)